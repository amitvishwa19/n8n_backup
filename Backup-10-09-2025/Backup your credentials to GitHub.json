{"createdAt":"2025-09-09T05:57:07.691Z","updatedAt":"2025-09-09T05:57:07.691Z","id":"ip8VdDreBmj2TPwZ","name":"Backup your credentials to GitHub","active":false,"isArchived":false,"nodes":[{"parameters":{},"id":"5f0808df-f64a-47aa-9c31-b3485cc4d6ed","name":"On clicking 'execute'","type":"n8n-nodes-base.manualTrigger","position":[816,512],"typeVersion":1},{"parameters":{"assignments":{"assignments":[{"id":"8d513345-6484-431f-afb7-7cf045c90f4f","name":"Done","type":"boolean","value":true}]},"options":{}},"id":"2bbda042-9284-41a4-95aa-a47651055a4b","name":"Return","type":"n8n-nodes-base.set","position":[2256,1088],"typeVersion":3.3},{"parameters":{"url":"={{ $json.download_url }}","options":{}},"id":"cde527d1-7f25-47d6-9e1b-9e95245af248","name":"Get File","type":"n8n-nodes-base.httpRequest","position":[1360,960],"typeVersion":4.2},{"parameters":{"conditions":{"options":{"version":1,"leftValue":"","caseSensitive":true,"typeValidation":"strict"},"combinator":"and","conditions":[{"id":"45ce825e-9fa6-430c-8931-9aaf22c42585","operator":{"type":"string","operation":"empty","singleValue":true},"leftValue":"={{ $json.content }}","rightValue":""},{"id":"9619a55f-7fb1-4f24-b1a7-7aeb82365806","operator":{"type":"string","operation":"notExists","singleValue":true},"leftValue":"={{ $json.error }}","rightValue":""}]},"options":{}},"id":"7825d494-8dff-4ea2-ae9e-0b906abe340d","name":"If file too large","type":"n8n-nodes-base.if","position":[1152,992],"typeVersion":2},{"parameters":{},"id":"e1fc0479-a2bb-4a03-b687-2376198f0368","name":"Merge Items","type":"n8n-nodes-base.merge","position":[1152,1248],"typeVersion":2},{"parameters":{"jsCode":"const orderJsonKeys = (jsonObj) => {\n  const ordered = {};\n  Object.keys(jsonObj).sort().forEach(key => {\n    ordered[key] = jsonObj[key];\n  });\n  return ordered;\n}\n\n// Check if file returned with content\nif (Object.keys($input.all()[0].json).includes(\"content\")) {\n  // Decode base64 content and parse JSON\n  const origWorkflow = JSON.parse(Buffer.from($input.all()[0].json.content, 'base64').toString());\n  const n8nWorkflow = $input.all()[1].json;\n  \n  // Order JSON objects\n  const orderedOriginal = orderJsonKeys(origWorkflow);\n  const orderedActual = orderJsonKeys(n8nWorkflow);\n\n  // Determine difference\n  if (JSON.stringify(orderedOriginal) === JSON.stringify(orderedActual)) {\n    $input.all()[0].json.github_status = \"same\";\n  } else {\n    $input.all()[0].json.github_status = \"different\";\n    $input.all()[0].json.n8n_data_stringy = JSON.stringify(orderedActual, null, 2);\n  }\n  $input.all()[0].json.content_decoded = orderedOriginal;\n// No file returned / new workflow\n} else if (Object.keys($input.all()[0].json).includes(\"data\")) {\n  const origWorkflow = JSON.parse($input.all()[0].json.data);\n  const n8nWorkflow = $input.all()[1].json;\n  \n  // Order JSON objects\n  const orderedOriginal = orderJsonKeys(origWorkflow);\n  const orderedActual = orderJsonKeys(n8nWorkflow);\n\n  // Determine difference\n  if (JSON.stringify(orderedOriginal) === JSON.stringify(orderedActual)) {\n    $input.all()[0].json.github_status = \"same\";\n  } else {\n    $input.all()[0].json.github_status = \"different\";\n    $input.all()[0].json.n8n_data_stringy = JSON.stringify(orderedActual, null, 2);\n  }\n  $input.all()[0].json.content_decoded = orderedOriginal;\n\n} else {\n  // Order JSON object\n  const n8nWorkflow = $input.all()[1].json;\n  const orderedActual = orderJsonKeys(n8nWorkflow);\n  \n  // Proper formatting\n  $input.all()[0].json.github_status = \"new\";\n  $input.all()[0].json.n8n_data_stringy = JSON.stringify(orderedActual, null, 2);\n}\n\n// Return items\nreturn $input.all();"},"id":"662103f0-ed07-4999-a6a4-5feb9c021c6e","name":"isDiffOrNew","type":"n8n-nodes-base.code","position":[1360,1248],"typeVersion":1},{"parameters":{"dataType":"string","value1":"={{$json.github_status}}","rules":{"rules":[{"value2":"same"},{"value2":"different","output":1},{"value2":"new","output":2}]}},"id":"e9ca2b26-3dfc-401a-b51d-8b869af71b62","name":"Check Status","type":"n8n-nodes-base.switch","position":[1568,1248],"typeVersion":1},{"parameters":{},"id":"bcfbe9e2-a401-4359-add8-87327aaab702","name":"Same file - Do nothing","type":"n8n-nodes-base.noOp","position":[1792,1088],"typeVersion":1},{"parameters":{},"id":"ba399158-6065-437c-a162-f9f8368a51de","name":"File is different","type":"n8n-nodes-base.noOp","position":[1792,1248],"typeVersion":1},{"parameters":{},"id":"884bf028-a136-4eb5-a743-2e98c134e0f7","name":"File is new","type":"n8n-nodes-base.noOp","position":[1792,1408],"typeVersion":1},{"parameters":{"resource":"file","owner":{"__rl":true,"mode":"name","value":"={{ $('Globals').item.json.repo.owner }}"},"repository":{"__rl":true,"mode":"name","value":"={{ $('Globals').item.json.repo.name }}"},"filePath":"={{ $('Globals').item.json.repo.path }}{{$('Execute Workflow Trigger').first().json.id}}.json","fileContent":"={{$('isDiffOrNew').item.json[\"n8n_data_stringy\"]}}","commitMessage":"={{$('Execute Workflow Trigger').first().json.name}} ({{$json.github_status}})"},"id":"f0c0cf41-4add-4a2b-a790-630049e3c916","name":"Create new file","type":"n8n-nodes-base.github","position":[2016,1408],"webhookId":"2074ba69-69d2-45c0-bc4b-38470befa147","typeVersion":1,"credentials":{"githubApi":{"id":"ep0tN9S6DnQS5et2","name":"GitHub account"}}},{"parameters":{"resource":"file","operation":"edit","owner":{"__rl":true,"mode":"name","value":"={{ $('Globals').item.json.repo.owner }}"},"repository":{"__rl":true,"mode":"name","value":"={{ $('Globals').item.json.repo.name }}"},"filePath":"={{ $('Globals').item.json.repo.path }}{{$('Execute Workflow Trigger').first().json.id}}.json","fileContent":"={{$('isDiffOrNew').item.json[\"n8n_data_stringy\"]}}","commitMessage":"={{$('Execute Workflow Trigger').first().json.name}} ({{$json.github_status}})"},"id":"ef69d5ff-b6d3-4b0b-9ae8-adcee91a1940","name":"Edit existing file","type":"n8n-nodes-base.github","position":[2016,1232],"webhookId":"f17ed06b-0b08-48bb-94b9-ad2fc1314602","typeVersion":1,"credentials":{"githubApi":{"id":"ep0tN9S6DnQS5et2","name":"GitHub account"}}},{"parameters":{"options":{}},"id":"b7116171-8bbf-4a30-8010-15599514e2e0","name":"Loop Over Items","type":"n8n-nodes-base.splitInBatches","position":[1408,608],"typeVersion":3},{"parameters":{"rule":{"interval":[{"field":"hours","hoursInterval":2}]}},"id":"760a3235-4b46-45b5-a732-a1a520c6d548","name":"Schedule Trigger","type":"n8n-nodes-base.scheduleTrigger","position":[816,704],"typeVersion":1.2},{"parameters":{"resource":"file","operation":"get","owner":{"__rl":true,"mode":"name","value":"={{ $json.repo.owner }}"},"repository":{"__rl":true,"mode":"name","value":"={{ $json.repo.name }}"},"filePath":"={{ $json.repo.path }}{{ $('Execute Workflow Trigger').item.json.id }}.json","asBinaryProperty":false,"additionalParameters":{}},"id":"cff04e4b-5d05-47da-b4d4-3cdb2cebfdcf","name":"Get file data","type":"n8n-nodes-base.github","position":[960,992],"webhookId":"d47279e5-2a81-462f-ac67-8e4b81fb23c6","typeVersion":1,"alwaysOutputData":true,"credentials":{"githubApi":{"id":"ep0tN9S6DnQS5et2","name":"GitHub account"}},"continueOnFail":true},{"parameters":{"assignments":{"assignments":[{"id":"6cf546c5-5737-4dbd-851b-17d68e0a3780","name":"repo.owner","type":"string","value":"amitvishwa19"},{"id":"452efa28-2dc6-4ea3-a7a2-c35d100d0382","name":"repo.name","type":"string","value":"n8n-backup-v2"},{"id":"81c4dc54-86bf-4432-a23f-22c7ea831e74","name":"repo.path","type":"string","value":"credentials/"}]},"options":{}},"id":"c5754c58-05dd-4f56-ba9a-395411ec1cd7","name":"Globals","type":"n8n-nodes-base.set","position":[752,1152],"typeVersion":3.4},{"parameters":{"command":"npx n8n export:credentials --all --decrypted"},"id":"659840b2-e9b5-4a98-a5f1-ec8dac62a575","name":"Execute Command","type":"n8n-nodes-base.executeCommand","position":[1040,608],"typeVersion":1},{"parameters":{"jsCode":"// Function to beautify JSON\nfunction beautifyJson(jsonString) {\n  try {\n    // Parse the JSON string\n    const jsonObject = JSON.parse(jsonString);\n\n    // Format the JSON with indentation\n    return jsonObject; // Return the parsed object directly\n  } catch (error) {\n    // Return the error message if JSON is invalid\n    return `Invalid JSON: ${error.message}`;\n  }\n}\n\n// Retrieve the JSON object from the input data\nconst input = $input.all()[0].json;\n\n// Extract the JSON string from the stdout field\nconst jsonString = input.stdout.match(/\\[{.*}\\]/s);\n\n// Check if a valid JSON string is found\nif (!jsonString) {\n  return {\n    json: {\n      error: \"No valid JSON string found in stdout.\"\n    }\n  };\n}\n\n// Beautify the JSON\nconst beautifiedJson = beautifyJson(jsonString[0]);\n\n// Output the beautified JSON, ensuring each entry is in an object with a 'json' key\nconst output = beautifiedJson.map(entry => ({ json: entry }));\n\n// Return the output\nreturn output;\n"},"id":"ee07f1af-6956-4a01-b1ee-4a86cf2eba05","name":"JSON formatting","type":"n8n-nodes-base.code","position":[1216,608],"typeVersion":2},{"parameters":{"workflowId":"={{ $workflow.id }}","mode":"each","options":{}},"id":"34af4b94-c034-489e-9575-3e80593f901d","name":"Execute Workflow","type":"n8n-nodes-base.executeWorkflow","position":[1632,608],"typeVersion":1},{"parameters":{"inputSource":"passthrough"},"id":"dc08a60e-41ae-48de-80fa-053d037a0e9b","name":"Execute Workflow Trigger","type":"n8n-nodes-base.executeWorkflowTrigger","position":[480,1264],"typeVersion":1.1}],"connections":{"Get File":{"main":[[{"node":"Merge Items","type":"main","index":0}]]},"File is new":{"main":[[{"node":"Create new file","type":"main","index":0}]]},"Merge Items":{"main":[[{"node":"isDiffOrNew","type":"main","index":0}]]},"isDiffOrNew":{"main":[[{"node":"Check Status","type":"main","index":0}]]},"Check Status":{"main":[[{"node":"Same file - Do nothing","type":"main","index":0}],[{"node":"File is different","type":"main","index":0}],[{"node":"File is new","type":"main","index":0}]]},"Get file data":{"main":[[{"node":"If file too large","type":"main","index":0}]]},"Create new file":{"main":[[{"node":"Return","type":"main","index":0}]]},"Execute Command":{"main":[[{"node":"JSON formatting","type":"main","index":0}]]},"JSON formatting":{"main":[[{"node":"Loop Over Items","type":"main","index":0}]]},"Loop Over Items":{"main":[[],[{"node":"Execute Workflow","type":"main","index":0}]]},"Execute Workflow":{"main":[[{"node":"Loop Over Items","type":"main","index":0}]]},"Schedule Trigger":{"main":[[{"node":"Execute Command","type":"main","index":0}]]},"File is different":{"main":[[{"node":"Edit existing file","type":"main","index":0}]]},"If file too large":{"main":[[{"node":"Get File","type":"main","index":0}],[{"node":"Merge Items","type":"main","index":0}]]},"Edit existing file":{"main":[[{"node":"Return","type":"main","index":0}]]},"On clicking 'execute'":{"main":[[{"node":"Execute Command","type":"main","index":0}]]},"Same file - Do nothing":{"main":[[{"node":"Return","type":"main","index":0}]]},"Execute Workflow Trigger":{"main":[[{"node":"Globals","type":"main","index":0},{"node":"Merge Items","type":"main","index":1}]]},"Globals":{"main":[[{"node":"Get file data","type":"main","index":0}]]}},"settings":{},"staticData":null,"meta":null,"pinData":null,"versionId":"cd677688-32a8-427b-b7a6-6cd81525d5fa","triggerCount":0,"shared":[{"createdAt":"2025-09-09T05:57:07.732Z","updatedAt":"2025-09-09T05:57:07.732Z","role":"workflow:owner","workflowId":"ip8VdDreBmj2TPwZ","projectId":"LcKquKU3RqmibYpm"}],"tags":[]}