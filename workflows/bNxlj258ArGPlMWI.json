{
  "active": false,
  "connections": {
    "When clicking ‘Test workflow’": {
      "main": [
        [
          {
            "node": "Get Existing Ideas",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Trigger1": {
      "main": [
        [
          {
            "node": "Get Existing Ideas",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Sheet Process": {
      "main": [
        [
          {
            "node": "Idea Generator",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Characters": {
      "main": [
        [
          {
            "node": "Split Out",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Idea Generator": {
      "main": [
        [
          {
            "node": "Set Characters",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Image Prompt": {
      "main": [
        [
          {
            "node": "Set Prompts 1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Existing Ideas": {
      "main": [
        [
          {
            "node": "Sheet Process",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Prompts 1": {
      "main": [
        [
          {
            "node": "Generate an image",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Images": {
      "main": [
        [
          {
            "node": "Wait 1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait 1": {
      "main": [
        [
          {
            "node": "Video Prompt",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out": {
      "main": [
        [
          {
            "node": "Image Prompt",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Videos": {
      "main": [
        [
          {
            "node": "Wait 2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait 2": {
      "main": [
        [
          {
            "node": "Get Videos",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Videos": {
      "main": [
        [
          {
            "node": "Split Out Parts",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out Parts": {
      "main": [
        [
          {
            "node": "Render Video",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Render Video": {
      "main": [
        [
          {
            "node": "Wait 3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait 3": {
      "main": [
        [
          {
            "node": "Download Video",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download Video": {
      "main": [
        [
          {
            "node": "Upload Video",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Upload Video": {
      "main": [
        [
          {
            "node": "Add Record",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Add Record": {
      "main": [
        [
          {
            "node": "Notification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Idea Generator",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "Image Prompt",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Generate an image": {
      "main": [
        [
          {
            "node": "Wait 1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model2": {
      "ai_languageModel": [
        [
          {
            "node": "Video Prompt",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-10-03T05:48:40.687Z",
  "id": "bNxlj258ArGPlMWI",
  "isArchived": false,
  "meta": null,
  "name": "Image Creation and Editing System",
  "nodes": [
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        -1072,
        -192
      ],
      "id": "7590cb47-9ead-436a-b711-6d8ffef414b6",
      "name": "When clicking ‘Test workflow’"
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "triggerAtHour": 17
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        -1072,
        -320
      ],
      "id": "259dcb4f-e239-48b6-a162-192e0b6cf7d8",
      "name": "Schedule Trigger1"
    },
    {
      "parameters": {
        "jsCode": "// Get all incoming items\nconst items = $input.all();\n\n// Extract the text field from each item\nconst texts = items.map(item => item.json.Topic);\n\n// Concatenate them (adjust the separator as needed)\nconst concatenated = texts.join(\", \");\n\n// Return a single item with the concatenated text\nreturn [{ json: { mergedText: concatenated } }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -704,
        -240
      ],
      "id": "f70f14e6-24ae-48fa-9d15-7e14293d96fc",
      "name": "Sheet Process"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "aefd1ab6-29fc-46a8-b817-cf86d62d5e4d",
              "name": "characters",
              "value": "=[\"Donald Trump\", \"Vladimir Putin\", \"Narendra Modi\", \"Emmanuel Macron\"]",
              "type": "array"
            },
            {
              "id": "10306eb9-43d8-4200-8c04-0ba31682e854",
              "name": "title",
              "value": "={{ $json.output }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -224,
        -240
      ],
      "id": "4936431d-f0ee-4f38-b91e-640fa94701f3",
      "name": "Set Characters"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Generate an idea for a new video to produce.\n\nHere are the ideas that we've already used: {{ $json.mergedText }}\nGive me one new, super viral idea, present it as 5-7 words:",
        "options": {
          "systemMessage": "=You're an expert in viral content creation with 5 years of experience.\n\nYou've created viral short videos that have gotten 10 billion views in total.\n\nYou specilize in short AI-generated videos with epic scenes, with topic {{ $('Get Existing Ideas').item.json.Topic }}\n\n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.7,
      "position": [
        -544,
        -240
      ],
      "id": "52e0d15a-f31b-4a39-88f3-0a9fa86e0cbb",
      "name": "Idea Generator"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Character: {{ $json.characters }}\nTitle: {{ $('Set Characters').item.json.title }}",
        "options": {
          "systemMessage": "=## Overview\nYou are an expert image prompt generator specializing in crafting highly detailed, captivating prompts for advanced image models like Flux. Your goal is to generate visually engaging, epic scenes featuring people transformed into iconic roles or cultural figures that resonate widely.\n\n## Instructions\nDescribe in detail the man's appearance, including the skin color, notable facial expressions, build, and distinctive features of the face, body and hair.\nBut DON'T MENTION THEIR NAME OR ANYTHING THAT MIGHT HELP IDENTIFY HIM.\nThe image generation model should understand fully how the person's face looks like, even without knowing the name, so describe it well.\nMake the body of the man if transformed into BODYBUILDER.\nSpecify clothing, accessories, and elements of style that authentically reflect the specified role, ensuring they fit naturally.\nDetail a complementary background and environment that vividly reinforce the theme, enhancing visual coherence.\nUse precise, imaginative descriptions to maximize visual appeal and prompt effectiveness.\nFull body shot, slightly low angle to emphasize power and stature.\nThe man is centered in frame.\nPower walk straight toward the camera.\nNEVER OUTPUT QUOTATION MARKS (\"\") OR NEWLINES (\\n).\n\n## Example\nInput:\nCharacter: Donald Trump\nTitle: Countries as presidents movie stars\n\nOutput:\nFull-height shot of a man with an ultra steroid BODYBUILDER type body. His face is american male, mid-70s, tall, golden comb-over hair, orange-tanned skin, intense gaze, distinctive eyebrows. He is in the Iron man suit (while his head is in the helmet, but the face is clear). He is centered in frame. Power walk straight toward the camera. Full body shot, slightly low angle to emphasize power and stature. Around him scene of New York in Avengers 1.\n\n## Important\nNEVER EVER OUTPUT QUOTATION MARKS (\"\") OR NEWLINES (\\n)."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.7,
      "position": [
        160,
        -240
      ],
      "id": "8d789787-bf78-4a15-9cb4-b81342c2111b",
      "name": "Image Prompt"
    },
    {
      "parameters": {
        "content": "# Generate a New Video Idea",
        "height": 500,
        "width": 1180,
        "color": 6
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -1104,
        -400
      ],
      "typeVersion": 1,
      "id": "b959ee60-717b-4403-ac9b-7c83e8b875fb",
      "name": "Sticky Note7"
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "1ChtHTAYyiLYk7ZzouswoNRH2TkvVAoGT55nDu5DpAto",
          "mode": "list",
          "cachedResultName": "Devlomatix Solutions Data",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1ChtHTAYyiLYk7ZzouswoNRH2TkvVAoGT55nDu5DpAto/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 27103859,
          "mode": "list",
          "cachedResultName": "SocialMediaPost",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1ChtHTAYyiLYk7ZzouswoNRH2TkvVAoGT55nDu5DpAto/edit#gid=27103859"
        },
        "filtersUI": {
          "values": [
            {
              "lookupColumn": "Status",
              "lookupValue": "Ready to Post"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.5,
      "position": [
        -864,
        -240
      ],
      "id": "14c5b1c7-a906-48c8-a2d7-9788e7527e6e",
      "name": "Get Existing Ideas",
      "executeOnce": true,
      "alwaysOutputData": true,
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "t919PiJpUuMhZcRL",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "content": "# Generate Images",
        "height": 500,
        "width": 980,
        "color": 6
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        128,
        -400
      ],
      "typeVersion": 1,
      "id": "2eba38ac-80fd-4733-9577-189e9091588a",
      "name": "Sticky Note8"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "3f7846c8-2c7f-440f-8245-71bf158ea311",
              "name": "prompt",
              "value": "={{ $json.output }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        448,
        -240
      ],
      "id": "1981e78c-e5a5-488e-bd95-60c63068e157",
      "name": "Set Prompts 1"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.piapi.ai/api/v1/task",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "X-API-Key"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n    \"model\": \"Qubico/flux1-dev\",\n    \"task_type\": \"txt2img\",\n    \"input\": {\n        \"prompt\": \"{{ $json.prompt }}\",\n        \"width\": 765, \n        \"height\": 1360\n    } \n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        656,
        -448
      ],
      "id": "c679c9fc-1ce6-4621-b2b6-4a20a88fec82",
      "name": "Generate Images"
    },
    {
      "parameters": {
        "amount": 10
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        800,
        -240
      ],
      "id": "37dfd985-04ef-4fe5-b13f-b858de48ecfd",
      "name": "Wait 1",
      "webhookId": "769d8b2e-5314-40d4-9b91-6115f04c046d"
    },
    {
      "parameters": {
        "fieldToSplitOut": "characters",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        -64,
        -240
      ],
      "id": "e5c2c526-cff8-4ae6-8620-b4a163031474",
      "name": "Split Out"
    },
    {
      "parameters": {
        "url": "=https://api.piapi.ai/api/v1/task/{{ $json.data.task_id }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "X-API-Key"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1104,
        -480
      ],
      "id": "467a27c5-7605-43d5-b463-8f72043a01e1",
      "name": "Get Images"
    },
    {
      "parameters": {
        "content": "# Generate Videos",
        "height": 400,
        "width": 840,
        "color": 7
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -1104,
        144
      ],
      "typeVersion": 1,
      "id": "318c4fb0-be12-4e50-b300-2e3c158e746b",
      "name": "Sticky Note9"
    },
    {
      "parameters": {
        "content": "# Render: Videos + Text + Audio",
        "height": 400,
        "width": 720,
        "color": 7
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -224,
        144
      ],
      "typeVersion": 1,
      "id": "8dfa3858-6793-4622-adf9-49a65dadbcc4",
      "name": "Sticky Note10"
    },
    {
      "parameters": {
        "content": "# Publish the Final Video",
        "height": 400,
        "width": 560,
        "color": 7
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        544,
        144
      ],
      "typeVersion": 1,
      "id": "fff5c380-41ef-491d-ae8f-40ab3651cb68",
      "name": "Sticky Note11"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.dev.runwayml.com/v1/image_to_video",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer  key_8edab34a4ed31faaeb930d1d472f5338d151b0d601734fe2350770307c4247a7e091851beb183c9f3cb0d1907ce75d305543fe4d82ae8f5cf4c5fcabafe41182"
            },
            {
              "name": "X-Runway-Version",
              "value": "2024-11-06"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "promptImage",
              "value": "={{ $('Get Images').item.json.data.output.image_url }}"
            },
            {
              "name": "seed",
              "value": "4294967295"
            },
            {
              "name": "model",
              "value": "gen4_turbo"
            },
            {
              "name": "promptText",
              "value": "={{ $json.output }}"
            },
            {
              "name": "duration",
              "value": "5"
            },
            {
              "name": "ratio",
              "value": "720:1280"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -720,
        240
      ],
      "id": "091c743f-7d14-4bdf-b448-c585162fe0a8",
      "name": "Generate Videos"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Title: {{ $('Set Characters').item.json.title }}\nImage prompt: {{ $('Set Prompts 1').item.json.prompt }}",
        "options": {
          "systemMessage": "=You're a helpful assistant.\n\nYour goal is to help me prepare a prompt for the video generator.\n\nI'll give you a prompt for the image generator, you will need to tweak it a little bit:\n- length of the prompt should be not more than 100 words\n- make the man WALK REALLY FAST\n- NEVER MENTION THE NAME OF THE PERSON DESCRIBED\n- NEVER MENTION THAT THE PERSON IS WELL KNOWN\n\nExample output:\nFull-height video of a walking man with an ultra steroid BODYBUILDER type body. His face is american male, mid-70s, tall, golden comb-over hair, orange-tanned skin, intense gaze, distinctive eyebrows. He is in the Iron man suit (while his face is without the helmet). He is centered in frame. He performs a power walk straight toward the camera. HE WALKS REALLY FAST. Full body video, slightly low angle to emphasize power and stature. Around him scene of New York in Avengers 1."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.7,
      "position": [
        -1040,
        240
      ],
      "id": "09748264-650c-4e84-a27f-3b7654c68b37",
      "name": "Video Prompt"
    },
    {
      "parameters": {
        "amount": 360
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        -544,
        240
      ],
      "id": "058ca77d-35f4-4ef3-88b4-b3e6e0103a04",
      "name": "Wait 2",
      "webhookId": "8d67e8a4-ff7f-4848-95a2-42d9092948de"
    },
    {
      "parameters": {
        "url": "=https://api.dev.runwayml.com/v1/tasks/{{ $json.id }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer"
            },
            {
              "name": "X-Runway-Version",
              "value": "2024-11-06"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -384,
        240
      ],
      "id": "a2b86f20-a2bb-4367-a96c-ec53208e888e",
      "name": "Get Videos"
    },
    {
      "parameters": {
        "jsCode": "// N8n Code Node to extract URLs from output arrays and combine them into a single array\n\n// This code assumes your input JSON is in items[0].json or is multiple items\n// Determine data source format\nlet inputArray;\n\nif (items.length === 1 && Array.isArray(items[0].json)) {\n  // If we have a single item containing our array\n  inputArray = items[0].json;\n} else if (items.length > 1) {\n  // If we already have multiple items, each containing part of our data\n  inputArray = items.map(item => item.json || item);\n} else {\n  throw new Error('Input structure not recognized. Please check your data format.');\n}\n\n// Create a single array to hold all URLs\nconst urlArray = [];\n\n// Process each item in the input array\nfor (const item of inputArray) {\n  // Get the data object\n  const data = item;\n  \n  // Check if the item has an output array\n  if (data.output && Array.isArray(data.output)) {\n    // For each URL in the output array, add to our URL array\n    for (const url of data.output) {\n      // You can choose to add just the URL or include metadata\n      urlArray.push({\n        url: url,\n        sourceId: data.id,\n        createdAt: data.createdAt\n      });\n    }\n  }\n}\n\n// Return a single item containing the array of all URLs\nreturn [{\n  json: {\n    urls: urlArray\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -160,
        240
      ],
      "id": "168355d3-d04a-419c-99d8-01ebdc8bd5fe",
      "name": "Split Out Parts"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.creatomate.com/v1/renders",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"template_id\": \"e990409c-5317-458a-8894-1d58d9e44d1f\",\n  \"modifications\": {\n    \"Video-1.source\": \"{{ $json.urls[0].url }}\",\n    \"Video-2.source\": \"{{ $json.urls[1].url }}\",\n    \"Video-3.source\": \"{{ $json.urls[2].url }}\",\n    \"Video-4.source\": \"{{ $json.urls[3].url }}\",\n    \"Text-1.text\": \"{{ $('Idea Generator').first().json.output}}\"\n  }\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        16,
        240
      ],
      "id": "cadb2ad5-3055-4ada-b00c-c3ea9869d263",
      "name": "Render Video",
      "executeOnce": false
    },
    {
      "parameters": {
        "amount": 120
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        176,
        240
      ],
      "id": "445ca71e-7757-4f5c-bfad-927dc005bb21",
      "name": "Wait 3",
      "webhookId": "316dc9ac-af7b-4cf6-80c1-b5ed26336f0d"
    },
    {
      "parameters": {
        "url": "={{ $json.url }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        336,
        240
      ],
      "id": "c7da7743-7ec7-43ce-859b-c08bbc7c5336",
      "name": "Download Video"
    },
    {
      "parameters": {
        "resource": "video",
        "operation": "upload",
        "title": "={{ $('Idea Generator').first().json.output}}",
        "regionCode": "US",
        "categoryId": "1",
        "options": {
          "privacyStatus": "unlisted"
        }
      },
      "type": "n8n-nodes-base.youTube",
      "typeVersion": 1,
      "position": [
        576,
        240
      ],
      "id": "9ee8e4c1-5aa1-4b68-ad06-03f24b38485d",
      "name": "Upload Video"
    },
    {
      "parameters": {
        "sendTo": "oleg@evolva.ai",
        "subject": "=New Short Processed: {{ $('Idea Generator').first().json.output}}",
        "emailType": "text",
        "message": "=Oleg,\n\nA new short has been created and is awaiting your approval.\n\nIt is called \"{{ $('Idea Generator').first().json.output}}\".\n\nYou can view it here: {{ $json.youtubeLink }}\n\nCheers!",
        "options": {
          "appendAttribution": false
        }
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        896,
        240
      ],
      "id": "49181084-1c08-4fa6-8610-d0c8467483e0",
      "name": "Notification",
      "webhookId": "bf3c6e22-a778-4c4a-b5bf-36f4c3043d07"
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "1J_bgTio5aBowvcIyKpfJvTROMEg9JLcfaOt34kRCD9g",
          "mode": "list",
          "cachedResultName": "Short Videos System",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1J_bgTio5aBowvcIyKpfJvTROMEg9JLcfaOt34kRCD9g/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Sheet1",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1J_bgTio5aBowvcIyKpfJvTROMEg9JLcfaOt34kRCD9g/edit#gid=0"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "videoLink": "={{ $('Render Video').item.json.url }}",
            "title": "={{ $('Idea Generator').first().json.output}}",
            "status": "review",
            "youtubeLink": "= https://www.youtube.com/shorts/{{ $json.uploadId }}"
          },
          "matchingColumns": [
            "row_number"
          ],
          "schema": [
            {
              "id": "title",
              "displayName": "title",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "status",
              "displayName": "status",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "videoLink",
              "displayName": "videoLink",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "youtubeLink",
              "displayName": "youtubeLink",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.5,
      "position": [
        736,
        240
      ],
      "id": "5e3c4f20-ed72-4f2f-964e-f26d2e705749",
      "name": "Add Record"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        -576,
        -32
      ],
      "id": "e835c414-39fd-4122-bdee-f4a5105f90c5",
      "name": "Google Gemini Chat Model",
      "credentials": {
        "googlePalmApi": {
          "id": "iw19guNKwTtfLMtO",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        160,
        -32
      ],
      "id": "d01ab3bf-3c56-4bcf-be46-54cbf705a35a",
      "name": "Google Gemini Chat Model1",
      "credentials": {
        "googlePalmApi": {
          "id": "iw19guNKwTtfLMtO",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "resource": "image",
        "modelId": {
          "__rl": true,
          "value": "models/gemini-2.0-flash-exp-image-generation",
          "mode": "list",
          "cachedResultName": "models/gemini-2.0-flash-exp-image-generation"
        },
        "prompt": "={{ $json.prompt }}",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.googleGemini",
      "typeVersion": 1,
      "position": [
        592,
        -240
      ],
      "id": "9ecbc598-b134-4f5e-9846-f19a573531ec",
      "name": "Generate an image",
      "credentials": {
        "googlePalmApi": {
          "id": "iw19guNKwTtfLMtO",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        -1040,
        416
      ],
      "id": "6c05c609-af47-4fb0-96f4-7ef780132530",
      "name": "Google Gemini Chat Model2",
      "credentials": {
        "googlePalmApi": {
          "id": "iw19guNKwTtfLMtO",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    }
  ],
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "shared": [
    {
      "createdAt": "2025-10-03T05:48:40.690Z",
      "updatedAt": "2025-10-03T05:48:40.690Z",
      "role": "workflow:owner",
      "workflowId": "bNxlj258ArGPlMWI",
      "projectId": "hWHkhBemod06cHxZ"
    }
  ],
  "staticData": null,
  "tags": [],
  "triggerCount": 0,
  "updatedAt": "2025-10-03T07:25:45.000Z",
  "versionId": "1e49a065-31d4-464c-9be3-efa43dc0d634"
}